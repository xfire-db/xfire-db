FIND_PACKAGE(Ruby)
SET(RUBY_CONFIG_FILE -r rbconfig)

IF(NOT RUBY_INCLUDE_PATH AND RUBY_RBCONF STREQUAL "")
	MESSAGE(FATAL_ERROR "rbconfig.rb not found. ${RUBY_RBCONF}")
ELSEIF(NOT RUBY_INCLUDE_PATH OR NOT RUBY_LIBRARY)
	function(_RUBY_CONF_VAR RBVAR OUTVAR)
		execute_process(COMMAND ${RUBY_EXECUTABLE} ${RUBY_CONFIG_FILE} -e "print RbConfig::CONFIG['${RBVAR}']"
			RESULT_VARIABLE _RUBY_SUCCESS
			OUTPUT_VARIABLE _RUBY_OUTPUT
			ERROR_QUIET)
		if(_RUBY_SUCCESS OR NOT _RUBY_OUTPUT)
			execute_process(COMMAND ${RUBY_EXECUTABLE} ${RUBY_CONFIG_FILE} -e "print Config::CONFIG['${RBVAR}']"
				RESULT_VARIABLE _RUBY_SUCCESS
				OUTPUT_VARIABLE _RUBY_OUTPUT
				ERROR_QUIET)
		endif()
		set(${OUTVAR} "${_RUBY_OUTPUT}" PARENT_SCOPE)
	endfunction()

	_RUBY_CONF_VAR("MAJOR" RUBY_VERSION_MAJOR)
	_RUBY_CONF_VAR("MINOR" RUBY_VERSION_MINOR)
	_RUBY_CONF_VAR("TEENY" RUBY_VERSION_PATCH)

	if(NOT RUBY_VERSION_PATCH)
		set(RUBY_VERSION_PATCH "0")
	endif()

	set(RUBY_VERSION "${RUBY_VERSION_MAJOR}.${RUBY_VERSION_MINOR}.${RUBY_VERSION_PATCH}")
	set(_RUBY_VERSION_SHORT "${RUBY_VERSION_MAJOR}.${RUBY_VERSION_MINOR}")
	set(_RUBY_VERSION_SHORT_NODOT "${RUBY_VERSION_MAJOR}${RUBY_VERSION_MINOR}")
	set(_RUBY_NODOT_VERSION "${RUBY_VERSION_MAJOR}${RUBY_VERSION_MINOR}${RUBY_VERSION_PATCH}")

	if(EXISTS ${RUBY_RBCONF})
		MESSAGE(STATUS "Found Ruby configuration: ${RUBY_RBCONF}")
	else()
		MESSAGE(FATAL_ERROR "${RUBY_RBCONF} does not exist.")
	endif()
	FIND_PROGRAM(RUBY_EXECUTABLE NAMES ruby)

	get_filename_component(RUBY_CONFIG_DIR ${RUBY_RBCONF} DIRECTORY)
	SET(RUBY_CONFIG_FILE -r ${RUBY_RBCONF} -W0)


  # query the ruby version

   # query the different directories
   _RUBY_CONF_VAR("archdir" RUBY_ARCH_DIR)
   _RUBY_CONF_VAR("arch" RUBY_ARCH)
   _RUBY_CONF_VAR("rubyhdrdir" RUBY_HDR_DIR)
   _RUBY_CONF_VAR("rubyarchhdrdir" RUBY_ARCHHDR_DIR)
   _RUBY_CONF_VAR("libdir" RUBY_POSSIBLE_LIB_DIR)
   _RUBY_CONF_VAR("rubylibdir" RUBY_RUBY_LIB_DIR)

   # site_ruby
   _RUBY_CONF_VAR("sitearchdir" RUBY_SITEARCH_DIR)
   _RUBY_CONF_VAR("sitelibdir" RUBY_SITELIB_DIR)


   # save the results in the cache so we don't have to run ruby the next time again
	set(RUBY_VERSION_MAJOR    ${RUBY_VERSION_MAJOR}    CACHE PATH "The Ruby major version" FORCE)
	set(RUBY_VERSION_MINOR    ${RUBY_VERSION_MINOR}    CACHE PATH "The Ruby minor version" FORCE)
	set(RUBY_VERSION_PATCH    ${RUBY_VERSION_PATCH}    CACHE PATH "The Ruby patch version" FORCE)
	set(RUBY_ARCH_DIR         ${RUBY_ARCH_DIR}         CACHE PATH "The Ruby arch dir" FORCE)
	set(RUBY_HDR_DIR          ${RUBY_HDR_DIR}          CACHE PATH "The Ruby header dir (1.9+)" FORCE)
	set(RUBY_ARCHHDR_DIR      ${RUBY_ARCHHDR_DIR}      CACHE PATH "The Ruby arch header dir (2.0+)" FORCE)
	set(RUBY_POSSIBLE_LIB_DIR ${RUBY_POSSIBLE_LIB_DIR} CACHE PATH "The Ruby lib dir" FORCE)
	set(RUBY_RUBY_LIB_DIR     ${RUBY_RUBY_LIB_DIR}     CACHE PATH "The Ruby ruby-lib dir" FORCE)
	set(RUBY_SITEARCH_DIR     ${RUBY_SITEARCH_DIR}     CACHE PATH "The Ruby site arch dir" FORCE)
	set(RUBY_SITELIB_DIR      ${RUBY_SITELIB_DIR}      CACHE PATH "The Ruby site lib dir" FORCE)
	set(RUBY_HAS_VENDOR_RUBY  ${RUBY_HAS_VENDOR_RUBY}  CACHE BOOL "Vendor Ruby is available" FORCE)
	set(RUBY_VENDORARCH_DIR   ${RUBY_VENDORARCH_DIR}   CACHE PATH "The Ruby vendor arch dir" FORCE)
	set(RUBY_VENDORLIB_DIR    ${RUBY_VENDORLIB_DIR}    CACHE PATH "The Ruby vendor lib dir" FORCE)

	   mark_as_advanced(
	     RUBY_ARCH_DIR
	     RUBY_ARCH
	     RUBY_HDR_DIR
	     RUBY_ARCHHDR_DIR
	     RUBY_POSSIBLE_LIB_DIR
	     RUBY_RUBY_LIB_DIR
	     RUBY_SITEARCH_DIR
	     RUBY_SITELIB_DIR
	     RUBY_HAS_VENDOR_RUBY
	     RUBY_VENDORARCH_DIR
	     RUBY_VENDORLIB_DIR
	     RUBY_VERSION_MAJOR
	     RUBY_VERSION_MINOR
	     RUBY_VERSION_PATCH
	     )

	find_path(RUBY_INCLUDE_DIR
	   NAMES ruby.h
	   HINTS
	   ${RUBY_HDR_DIR}
	   ${RUBY_ARCH_DIR})

	   find_path(RUBY_CONFIG_INCLUDE_DIR
	     NAMES ruby/config.h  config.h
	     HINTS
	     ${RUBY_HDR_DIR}/${RUBY_ARCH}
	     ${RUBY_ARCH_DIR}
	     ${RUBY_ARCHHDR_DIR}
	     )

	if(WIN32)
		set( _RUBY_MSVC_RUNTIME "" )
		if( MSVC60 )
			set( _RUBY_MSVC_RUNTIME "60" )
		endif()
		if( MSVC70 )
			set( _RUBY_MSVC_RUNTIME "70" )
		endif()
		if( MSVC71 )
			set( _RUBY_MSVC_RUNTIME "71" )
		endif()
		if( MSVC80 )
			set( _RUBY_MSVC_RUNTIME "80" )
		endif()
		if( MSVC90 )
			set( _RUBY_MSVC_RUNTIME "90" )
		endif()

		list(APPEND _RUBY_POSSIBLE_LIB_NAMES
			"msvcr${_RUBY_MSVC_RUNTIME}-ruby${_RUBY_NODOT_VERSION}"
			"msvcr${_RUBY_MSVC_RUNTIME}-ruby${_RUBY_NODOT_VERSION}-static"
			"msvcrt-ruby${_RUBY_NODOT_VERSION}"
			"msvcrt-ruby${_RUBY_NODOT_VERSION}-static" )
	endif()
	find_library(RUBY_LIBRARY NAMES ${_RUBY_POSSIBLE_LIB_NAMES} HINTS ${RUBY_POSSIBLE_LIB_DIR} )

	set(RUBY_INCLUDE_DIRS ${RUBY_INCLUDE_DIR} ${RUBY_CONFIG_INCLUDE_DIR} )
	set(RUBY_INCLUDE_PATH ${RUBY_INCLUDE_DIRS})

	mark_as_advanced(
	  RUBY_EXECUTABLE
	  RUBY_LIBRARY
	  RUBY_INCLUDE_DIR
	  RUBY_CONFIG_INCLUDE_DIR
	  )
ENDIF()

IF(NOT RUBY_EXTENSIONS_AVAILABLE)
    SET(RUBY_EXTENSIONS_AVAILABLE TRUE)
    STRING(REGEX REPLACE ".*(lib|share)(32|64)?/?" "\\1/" RUBY_EXTENSIONS_INSTALL_DIR ${RUBY_ARCH_DIR})
    STRING(REGEX REPLACE ".*(lib|share)(32|64)?/?" "\\1/" RUBY_LIBRARY_INSTALL_DIR ${RUBY_RUBY_LIB_PATH})

    FIND_PROGRAM(RDOC_EXECUTABLE NAMES rdoc1.9 rdoc1.8 rdoc)
    FIND_PROGRAM(YARD_EXECUTABLE NAMES yard)

    EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} ${RUBY_CONFIG_FILE} -e "puts RUBY_VERSION"
       OUTPUT_VARIABLE RUBY_VERSION)
    STRING(REPLACE "\n" "" RUBY_VERSION ${RUBY_VERSION})
    message(STATUS "using Ruby version ${RUBY_VERSION}")

    EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} ${RUBY_CONFIG_FILE} -e "puts RbConfig::CONFIG['CFLAGS']"
       OUTPUT_VARIABLE RUBY_CFLAGS)
    STRING(REPLACE "\n" "" RUBY_CFLAGS ${RUBY_CFLAGS})

    MACRO(ADD_RUBY_EXTENSION target)
        list(GET RUBY_INCLUDE_PATH 0 ruby_path)
	GET_FILENAME_COMPONENT(rubylib_path ${ruby_path} PATH)
	LINK_DIRECTORIES(${rubylib_path})

	INCLUDE_DIRECTORIES(${RUBY_INCLUDE_PATH})
	SET_SOURCE_FILES_PROPERTIES(${ARGN} PROPERTIES COMPILE_FLAGS "${RUBY_CFLAGS}")
	ADD_LIBRARY(${target} MODULE ${ARGN})
	target_link_libraries(${target} PUBLIC ${RUBY_LIBRARY})
	SET_TARGET_PROPERTIES(${target} PROPERTIES
		PREFIX ""
		SUFFIX .so)
    ENDMACRO(ADD_RUBY_EXTENSION)
ENDIF(NOT RUBY_EXTENSIONS_AVAILABLE)

